// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_project.satisfaction_2020_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: satisfaction_2020 Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class satisfaction_2020 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (INPUT_PATH != null) {

				this.setProperty("INPUT_PATH", INPUT_PATH.toString());

			}

		}

		public String INPUT_PATH;

		public String getINPUT_PATH() {
			return this.INPUT_PATH;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "satisfaction_2020";
	private final String projectName = "ETL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					satisfaction_2020.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(satisfaction_2020.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void Implicit_Context_Regex_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		Implicit_Context_Context_error(exception, errorComponent, globalMap);

	}

	public void Implicit_Context_Context_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		Implicit_Context_Regex_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void Implicit_Context_Regex_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row_Implicit_Context_RegexStruct
			implements routines.system.IPersistableRow<row_Implicit_Context_RegexStruct> {
		final static byte[] commonByteArrayLock_ETL_PROJECT_satisfaction_2020 = new byte[0];
		static byte[] commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PROJECT_satisfaction_2020.length) {
					if (length < 1024 && commonByteArray_ETL_PROJECT_satisfaction_2020.length == 0) {
						commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[1024];
					} else {
						commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PROJECT_satisfaction_2020, 0, length);
				strReturn = new String(commonByteArray_ETL_PROJECT_satisfaction_2020, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PROJECT_satisfaction_2020) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_Implicit_Context_RegexStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void Implicit_Context_RegexProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_Implicit_Context_RegexStruct row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();

				/**
				 * [Implicit_Context_Context begin ] start
				 */

				ok_Hash.put("Implicit_Context_Context", false);
				start_Hash.put("Implicit_Context_Context", System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_Implicit_Context_Context = 0;

				java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				int nb_line_Implicit_Context_Context = 0;

				/**
				 * [Implicit_Context_Context begin ] stop
				 */

				/**
				 * [Implicit_Context_Regex begin ] start
				 */

				ok_Hash.put("Implicit_Context_Regex", false);
				start_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Regex";

				currentComponent = "Implicit_Context_Regex";

				int tos_count_Implicit_Context_Regex = 0;

				int nb_line_Implicit_Context_Regex = 0;

				int footer_Implicit_Context_Regex = 0;
				boolean removeEmptyRowImplicit_Context_Regex = true;
				Object source_Implicit_Context_Regex = /** Start field Implicit_Context_Regex:FILENAME */
						"C:/Users/bapti/ProjectBigData-GRP6/ETL project/ETL_PROJECT/resources/config/config.properties"/**
																														 * End
																														 * field
																														 * Implicit_Context_Regex:FILENAME
																														 */
				;

				org.talend.fileprocess.TOSDelimitedReader inImplicit_Context_Regex = null;
				if (source_Implicit_Context_Regex instanceof String
						|| source_Implicit_Context_Regex instanceof java.io.InputStream) {
					inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/**
																								 * Start field
																								 * Implicit_Context_Regex:FILENAME
																								 */
							"C:/Users/bapti/ProjectBigData-GRP6/ETL project/ETL_PROJECT/resources/config/config.properties"/**
																															 * End
																															 * field
																															 * Implicit_Context_Regex:FILENAME
																															 */
							, "UTF-8", "", "\n", removeEmptyRowImplicit_Context_Regex);
				} else {
					throw new java.lang.Exception(
							"The source data should be specified as File Path or InputStream or java.io.Reader!");
				}
				String strImplicit_Context_Regex;
				int totalLineImplicit_Context_Regex = 0, currentLineImplicit_Context_Regex = 0,
						beginLineImplicit_Context_Regex = 0, lastLineImplicit_Context_Regex = -1,
						validRowCountImplicit_Context_Regex = 0;
				int limitImplicit_Context_Regex = -1;

				int headerImplicit_Context_Regex = 0;
				if (headerImplicit_Context_Regex > 0) {
					beginLineImplicit_Context_Regex = headerImplicit_Context_Regex + 1;
				}

				if (footer_Implicit_Context_Regex > 0) {
					while (inImplicit_Context_Regex.readRecord()) {
						strImplicit_Context_Regex = inImplicit_Context_Regex.getRowRecord();
						totalLineImplicit_Context_Regex++;
					}
					int lastLineTempImplicit_Context_Regex = totalLineImplicit_Context_Regex
							- footer_Implicit_Context_Regex < 0 ? 0
									: totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex;
					if (lastLineImplicit_Context_Regex > 0) {
						lastLineImplicit_Context_Regex = lastLineImplicit_Context_Regex < lastLineTempImplicit_Context_Regex
								? lastLineImplicit_Context_Regex
								: lastLineTempImplicit_Context_Regex;
					} else {
						lastLineImplicit_Context_Regex = lastLineTempImplicit_Context_Regex;
					}
					inImplicit_Context_Regex.close();
					inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/**
																								 * Start field
																								 * Implicit_Context_Regex:FILENAME
																								 */
							"C:/Users/bapti/ProjectBigData-GRP6/ETL project/ETL_PROJECT/resources/config/config.properties"/**
																															 * End
																															 * field
																															 * Implicit_Context_Regex:FILENAME
																															 */
							, "UTF-8", "", "\n", removeEmptyRowImplicit_Context_Regex);
				}
				java.util.StringTokenizer strTokenImplicit_Context_Regex;
				java.util.regex.Pattern patternImplicit_Context_Regex = java.util.regex.Pattern
						.compile("^([^" + "=" + "]*)" + "=" + "(.*)$");
				java.util.regex.Matcher matcherImplicit_Context_Regex = null;

				while (inImplicit_Context_Regex.readRecord()) {
					strImplicit_Context_Regex = inImplicit_Context_Regex.getRowRecord();

					currentLineImplicit_Context_Regex++;
					if (currentLineImplicit_Context_Regex < beginLineImplicit_Context_Regex) {
						continue;
					}
					if (lastLineImplicit_Context_Regex > -1
							&& currentLineImplicit_Context_Regex > lastLineImplicit_Context_Regex) {
						break;
					}
					if (removeEmptyRowImplicit_Context_Regex && ("").equals(strImplicit_Context_Regex)) {
						continue;
					}
					if (limitImplicit_Context_Regex != -1
							&& validRowCountImplicit_Context_Regex >= limitImplicit_Context_Regex) {
						break;
					}

					matcherImplicit_Context_Regex = patternImplicit_Context_Regex.matcher(strImplicit_Context_Regex);
					int groupCountImplicit_Context_Regex = 0;
					boolean isMatchImplicit_Context_Regex = matcherImplicit_Context_Regex.find();
					if (isMatchImplicit_Context_Regex) {
						groupCountImplicit_Context_Regex = matcherImplicit_Context_Regex.groupCount();
					}
					row_Implicit_Context_Regex = null;

					boolean lineIsEmptyImplicit_Context_Regex = strImplicit_Context_Regex.length() == 0;

					String[] valueImplicit_Context_Regex = new String[2];
					String frontCharImplicit_Context_Regex, behindCharImplicit_Context_Regex;
					for (int i = 0; i < 2; i++) {
						valueImplicit_Context_Regex[i] = "";
						if (lineIsEmptyImplicit_Context_Regex) {
							continue;
						}
						if (i < groupCountImplicit_Context_Regex) {
							valueImplicit_Context_Regex[i] = matcherImplicit_Context_Regex.group(i + 1);
						}
					}
					validRowCountImplicit_Context_Regex++;

					boolean whetherReject_Implicit_Context_Regex = false;
					row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();
					try {
						if (!isMatchImplicit_Context_Regex) {// line data not matched with given regex parameter
							throw new java.lang.Exception("Line doesn't match: " + strImplicit_Context_Regex);
						}

						if (valueImplicit_Context_Regex[0] != null && valueImplicit_Context_Regex[0].length() > 0) {
							row_Implicit_Context_Regex.key = valueImplicit_Context_Regex[0];
						} else {
							row_Implicit_Context_Regex.key = "";
						}

						if (valueImplicit_Context_Regex[1] != null && valueImplicit_Context_Regex[1].length() > 0) {
							row_Implicit_Context_Regex.value = valueImplicit_Context_Regex[1];
						} else {
							row_Implicit_Context_Regex.value = "";
						}

					} catch (java.lang.Exception e) {
						whetherReject_Implicit_Context_Regex = true;
						if (isMatchImplicit_Context_Regex) {
							System.err.println(e.getMessage());
						}
						row_Implicit_Context_Regex = null;
					}

					nb_line_Implicit_Context_Regex++;

					/**
					 * [Implicit_Context_Regex begin ] stop
					 */

					/**
					 * [Implicit_Context_Regex main ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					tos_count_Implicit_Context_Regex++;

					/**
					 * [Implicit_Context_Regex main ] stop
					 */

					/**
					 * [Implicit_Context_Regex process_data_begin ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					/**
					 * [Implicit_Context_Regex process_data_begin ] stop
					 */
// Start of branch "row_Implicit_Context_Regex"
					if (row_Implicit_Context_Regex != null) {

						/**
						 * [Implicit_Context_Context main ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
						}

						//////////////////////////
						String tmp_key_Implicit_Context_Context = null;
						String key_Implicit_Context_Context = null;
						if (row_Implicit_Context_Regex.key != null) {
							tmp_key_Implicit_Context_Context = row_Implicit_Context_Regex.key.trim();
							if ((tmp_key_Implicit_Context_Context.startsWith("#")
									|| tmp_key_Implicit_Context_Context.startsWith("!"))) {
								tmp_key_Implicit_Context_Context = null;
							} else {
								row_Implicit_Context_Regex.key = tmp_key_Implicit_Context_Context;
							}
						}
						if (row_Implicit_Context_Regex.key != null) {
							key_Implicit_Context_Context = row_Implicit_Context_Regex.key;
						}
						String value_Implicit_Context_Context = null;
						if (row_Implicit_Context_Regex.value != null) {
							value_Implicit_Context_Context = row_Implicit_Context_Regex.value;
						}

						String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;

						if (tmp_key_Implicit_Context_Context != null) {
							try {
								if (key_Implicit_Context_Context != null
										&& "INPUT_PATH".equals(key_Implicit_Context_Context)) {
									context.INPUT_PATH = value_Implicit_Context_Context;
								}

								if (context.getProperty(key_Implicit_Context_Context) != null) {
									assignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
								} else {
									newPropertyList_Implicit_Context_Context.add(key_Implicit_Context_Context);
								}
								if (value_Implicit_Context_Context == null) {
									context.setProperty(key_Implicit_Context_Context, "");
								} else {
									context.setProperty(key_Implicit_Context_Context, value_Implicit_Context_Context);
								}
							} catch (java.lang.Exception e) {
								System.err.println("Setting a value for the key \"" + key_Implicit_Context_Context
										+ "\" has failed. Error message: " + e.getMessage());
							}
							nb_line_Implicit_Context_Context++;
						}
						//////////////////////////

						tos_count_Implicit_Context_Context++;

						/**
						 * [Implicit_Context_Context main ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_begin ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_begin ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_end ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_end ] stop
						 */

					} // End of branch "row_Implicit_Context_Regex"

					/**
					 * [Implicit_Context_Regex process_data_end ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

					/**
					 * [Implicit_Context_Regex process_data_end ] stop
					 */

					/**
					 * [Implicit_Context_Regex end ] start
					 */

					currentVirtualComponent = "Implicit_Context_Regex";

					currentComponent = "Implicit_Context_Regex";

				}
				if (!(source_Implicit_Context_Regex instanceof java.io.InputStream)) {
					inImplicit_Context_Regex.close();
				}
				inImplicit_Context_Regex = null;
				globalMap.put("Implicit_Context_Regex_NB_LINE", nb_line_Implicit_Context_Regex);

				ok_Hash.put("Implicit_Context_Regex", true);
				end_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());

				/**
				 * [Implicit_Context_Regex end ] stop
				 */

				/**
				 * [Implicit_Context_Context end ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				java.util.Enumeration<?> enu_Implicit_Context_Context = context.propertyNames();
				while (enu_Implicit_Context_Context.hasMoreElements()) {
					String key_Implicit_Context_Context = (String) enu_Implicit_Context_Context.nextElement();
					if (!assignList_Implicit_Context_Context.contains(key_Implicit_Context_Context)
							&& !newPropertyList_Implicit_Context_Context.contains(key_Implicit_Context_Context)) {
						noAssignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
					}
				}
				for (Object obj_Implicit_Context_Context : newPropertyList_Implicit_Context_Context) {

					System.out.println("Warning: Parameter \"" + obj_Implicit_Context_Context
							+ "\" is a new parameter of Implicit_Context_Context");
				}
				for (Object obj_Implicit_Context_Context : noAssignList_Implicit_Context_Context) {

					System.out.println("Warning: Parameter \"" + obj_Implicit_Context_Context
							+ "\" has not been set by Implicit_Context_Context");

				}

				String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context.toString();
				String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context.substring(1,
						newPropertyStr_Implicit_Context_Context.length() - 1);

				String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context.toString();
				String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context.substring(1,
						noAssignStr_Implicit_Context_Context.length() - 1);

				globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT", newProperty_Implicit_Context_Context);
				globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED", noAssign_Implicit_Context_Context);

				globalMap.put("Implicit_Context_Context_NB_LINE", nb_line_Implicit_Context_Context);

				List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "", Thread.currentThread().getId() + "", "",
						"", "", "",
						resumeUtil.convertToJsonText(context, parametersToEncrypt_Implicit_Context_Context));

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("Implicit_Context_Context", true);
				end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());

				/**
				 * [Implicit_Context_Context end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [Implicit_Context_Regex finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Regex";

				currentComponent = "Implicit_Context_Regex";

				/**
				 * [Implicit_Context_Regex finally ] stop
				 */

				/**
				 * [Implicit_Context_Context finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				/**
				 * [Implicit_Context_Context finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 1);
	}

	public static class satisfactionStruct implements routines.system.IPersistableRow<satisfactionStruct> {
		final static byte[] commonByteArrayLock_ETL_PROJECT_satisfaction_2020 = new byte[0];
		static byte[] commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[0];

		public String finess;

		public String getFiness() {
			return this.finess;
		}

		public String rs_finess;

		public String getRs_finess() {
			return this.rs_finess;
		}

		public Float score_accueil;

		public Float getScore_accueil() {
			return this.score_accueil;
		}

		public Float score_prise_en_charge_inf;

		public Float getScore_prise_en_charge_inf() {
			return this.score_prise_en_charge_inf;
		}

		public Float score_prise_en_charge_med;

		public Float getScore_prise_en_charge_med() {
			return this.score_prise_en_charge_med;
		}

		public Float score_chambre;

		public Float getScore_chambre() {
			return this.score_chambre;
		}

		public Float score_repas;

		public Float getScore_repas() {
			return this.score_repas;
		}

		public Float score_sortie;

		public Float getScore_sortie() {
			return this.score_sortie;
		}

		public Float taux_recommandation;

		public Float getTaux_recommandation() {
			return this.taux_recommandation;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PROJECT_satisfaction_2020.length) {
					if (length < 1024 && commonByteArray_ETL_PROJECT_satisfaction_2020.length == 0) {
						commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[1024];
					} else {
						commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PROJECT_satisfaction_2020, 0, length);
				strReturn = new String(commonByteArray_ETL_PROJECT_satisfaction_2020, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PROJECT_satisfaction_2020) {

				try {

					int length = 0;

					this.finess = readString(dis);

					this.rs_finess = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.score_accueil = null;
					} else {
						this.score_accueil = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.score_prise_en_charge_inf = null;
					} else {
						this.score_prise_en_charge_inf = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.score_prise_en_charge_med = null;
					} else {
						this.score_prise_en_charge_med = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.score_chambre = null;
					} else {
						this.score_chambre = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.score_repas = null;
					} else {
						this.score_repas = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.score_sortie = null;
					} else {
						this.score_sortie = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.taux_recommandation = null;
					} else {
						this.taux_recommandation = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.finess, dos);

				// String

				writeString(this.rs_finess, dos);

				// Float

				if (this.score_accueil == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_accueil);
				}

				// Float

				if (this.score_prise_en_charge_inf == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_prise_en_charge_inf);
				}

				// Float

				if (this.score_prise_en_charge_med == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_prise_en_charge_med);
				}

				// Float

				if (this.score_chambre == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_chambre);
				}

				// Float

				if (this.score_repas == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_repas);
				}

				// Float

				if (this.score_sortie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_sortie);
				}

				// Float

				if (this.taux_recommandation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taux_recommandation);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("finess=" + finess);
			sb.append(",rs_finess=" + rs_finess);
			sb.append(",score_accueil=" + String.valueOf(score_accueil));
			sb.append(",score_prise_en_charge_inf=" + String.valueOf(score_prise_en_charge_inf));
			sb.append(",score_prise_en_charge_med=" + String.valueOf(score_prise_en_charge_med));
			sb.append(",score_chambre=" + String.valueOf(score_chambre));
			sb.append(",score_repas=" + String.valueOf(score_repas));
			sb.append(",score_sortie=" + String.valueOf(score_sortie));
			sb.append(",taux_recommandation=" + String.valueOf(taux_recommandation));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(satisfactionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ETL_PROJECT_satisfaction_2020 = new byte[0];
		static byte[] commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[0];

		public String finess;

		public String getFiness() {
			return this.finess;
		}

		public String rs_finess;

		public String getRs_finess() {
			return this.rs_finess;
		}

		public String finess_geo;

		public String getFiness_geo() {
			return this.finess_geo;
		}

		public String rs_finess_geo;

		public String getRs_finess_geo() {
			return this.rs_finess_geo;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String participation;

		public String getParticipation() {
			return this.participation;
		}

		public String Depot;

		public String getDepot() {
			return this.Depot;
		}

		public Integer nb_rep_score_all_rea_ajust;

		public Integer getNb_rep_score_all_rea_ajust() {
			return this.nb_rep_score_all_rea_ajust;
		}

		public String score_all_rea_ajust;

		public String getScore_all_rea_ajust() {
			return this.score_all_rea_ajust;
		}

		public String classement;

		public String getClassement() {
			return this.classement;
		}

		public String evolution;

		public String getEvolution() {
			return this.evolution;
		}

		public Integer nb_rep_score_accueil_rea_ajust;

		public Integer getNb_rep_score_accueil_rea_ajust() {
			return this.nb_rep_score_accueil_rea_ajust;
		}

		public Float score_accueil_rea_ajust;

		public Float getScore_accueil_rea_ajust() {
			return this.score_accueil_rea_ajust;
		}

		public Integer nb_rep_score_PECinf_rea_ajust;

		public Integer getNb_rep_score_PECinf_rea_ajust() {
			return this.nb_rep_score_PECinf_rea_ajust;
		}

		public Float score_PECinf_rea_ajust;

		public Float getScore_PECinf_rea_ajust() {
			return this.score_PECinf_rea_ajust;
		}

		public Integer nb_rep_score_PECmed_rea_ajust;

		public Integer getNb_rep_score_PECmed_rea_ajust() {
			return this.nb_rep_score_PECmed_rea_ajust;
		}

		public Float score_PECmed_rea_ajust;

		public Float getScore_PECmed_rea_ajust() {
			return this.score_PECmed_rea_ajust;
		}

		public Integer nb_rep_score_chambre_rea_ajust;

		public Integer getNb_rep_score_chambre_rea_ajust() {
			return this.nb_rep_score_chambre_rea_ajust;
		}

		public Float score_chambre_rea_ajust;

		public Float getScore_chambre_rea_ajust() {
			return this.score_chambre_rea_ajust;
		}

		public Integer nb_rep_score_repas_rea_ajust;

		public Integer getNb_rep_score_repas_rea_ajust() {
			return this.nb_rep_score_repas_rea_ajust;
		}

		public Float score_repas_rea_ajust;

		public Float getScore_repas_rea_ajust() {
			return this.score_repas_rea_ajust;
		}

		public Integer nb_rep_score_sortie_rea_ajust;

		public Integer getNb_rep_score_sortie_rea_ajust() {
			return this.nb_rep_score_sortie_rea_ajust;
		}

		public Float score_sortie_rea_ajust;

		public Float getScore_sortie_rea_ajust() {
			return this.score_sortie_rea_ajust;
		}

		public String taux_reco_brut;

		public String getTaux_reco_brut() {
			return this.taux_reco_brut;
		}

		public Integer nb_reco_brut;

		public Integer getNb_reco_brut() {
			return this.nb_reco_brut;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PROJECT_satisfaction_2020.length) {
					if (length < 1024 && commonByteArray_ETL_PROJECT_satisfaction_2020.length == 0) {
						commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[1024];
					} else {
						commonByteArray_ETL_PROJECT_satisfaction_2020 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PROJECT_satisfaction_2020, 0, length);
				strReturn = new String(commonByteArray_ETL_PROJECT_satisfaction_2020, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PROJECT_satisfaction_2020) {

				try {

					int length = 0;

					this.finess = readString(dis);

					this.rs_finess = readString(dis);

					this.finess_geo = readString(dis);

					this.rs_finess_geo = readString(dis);

					this.region = readString(dis);

					this.participation = readString(dis);

					this.Depot = readString(dis);

					this.nb_rep_score_all_rea_ajust = readInteger(dis);

					this.score_all_rea_ajust = readString(dis);

					this.classement = readString(dis);

					this.evolution = readString(dis);

					this.nb_rep_score_accueil_rea_ajust = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.score_accueil_rea_ajust = null;
					} else {
						this.score_accueil_rea_ajust = dis.readFloat();
					}

					this.nb_rep_score_PECinf_rea_ajust = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.score_PECinf_rea_ajust = null;
					} else {
						this.score_PECinf_rea_ajust = dis.readFloat();
					}

					this.nb_rep_score_PECmed_rea_ajust = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.score_PECmed_rea_ajust = null;
					} else {
						this.score_PECmed_rea_ajust = dis.readFloat();
					}

					this.nb_rep_score_chambre_rea_ajust = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.score_chambre_rea_ajust = null;
					} else {
						this.score_chambre_rea_ajust = dis.readFloat();
					}

					this.nb_rep_score_repas_rea_ajust = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.score_repas_rea_ajust = null;
					} else {
						this.score_repas_rea_ajust = dis.readFloat();
					}

					this.nb_rep_score_sortie_rea_ajust = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.score_sortie_rea_ajust = null;
					} else {
						this.score_sortie_rea_ajust = dis.readFloat();
					}

					this.taux_reco_brut = readString(dis);

					this.nb_reco_brut = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.finess, dos);

				// String

				writeString(this.rs_finess, dos);

				// String

				writeString(this.finess_geo, dos);

				// String

				writeString(this.rs_finess_geo, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.participation, dos);

				// String

				writeString(this.Depot, dos);

				// Integer

				writeInteger(this.nb_rep_score_all_rea_ajust, dos);

				// String

				writeString(this.score_all_rea_ajust, dos);

				// String

				writeString(this.classement, dos);

				// String

				writeString(this.evolution, dos);

				// Integer

				writeInteger(this.nb_rep_score_accueil_rea_ajust, dos);

				// Float

				if (this.score_accueil_rea_ajust == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_accueil_rea_ajust);
				}

				// Integer

				writeInteger(this.nb_rep_score_PECinf_rea_ajust, dos);

				// Float

				if (this.score_PECinf_rea_ajust == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_PECinf_rea_ajust);
				}

				// Integer

				writeInteger(this.nb_rep_score_PECmed_rea_ajust, dos);

				// Float

				if (this.score_PECmed_rea_ajust == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_PECmed_rea_ajust);
				}

				// Integer

				writeInteger(this.nb_rep_score_chambre_rea_ajust, dos);

				// Float

				if (this.score_chambre_rea_ajust == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_chambre_rea_ajust);
				}

				// Integer

				writeInteger(this.nb_rep_score_repas_rea_ajust, dos);

				// Float

				if (this.score_repas_rea_ajust == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_repas_rea_ajust);
				}

				// Integer

				writeInteger(this.nb_rep_score_sortie_rea_ajust, dos);

				// Float

				if (this.score_sortie_rea_ajust == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.score_sortie_rea_ajust);
				}

				// String

				writeString(this.taux_reco_brut, dos);

				// Integer

				writeInteger(this.nb_reco_brut, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("finess=" + finess);
			sb.append(",rs_finess=" + rs_finess);
			sb.append(",finess_geo=" + finess_geo);
			sb.append(",rs_finess_geo=" + rs_finess_geo);
			sb.append(",region=" + region);
			sb.append(",participation=" + participation);
			sb.append(",Depot=" + Depot);
			sb.append(",nb_rep_score_all_rea_ajust=" + String.valueOf(nb_rep_score_all_rea_ajust));
			sb.append(",score_all_rea_ajust=" + score_all_rea_ajust);
			sb.append(",classement=" + classement);
			sb.append(",evolution=" + evolution);
			sb.append(",nb_rep_score_accueil_rea_ajust=" + String.valueOf(nb_rep_score_accueil_rea_ajust));
			sb.append(",score_accueil_rea_ajust=" + String.valueOf(score_accueil_rea_ajust));
			sb.append(",nb_rep_score_PECinf_rea_ajust=" + String.valueOf(nb_rep_score_PECinf_rea_ajust));
			sb.append(",score_PECinf_rea_ajust=" + String.valueOf(score_PECinf_rea_ajust));
			sb.append(",nb_rep_score_PECmed_rea_ajust=" + String.valueOf(nb_rep_score_PECmed_rea_ajust));
			sb.append(",score_PECmed_rea_ajust=" + String.valueOf(score_PECmed_rea_ajust));
			sb.append(",nb_rep_score_chambre_rea_ajust=" + String.valueOf(nb_rep_score_chambre_rea_ajust));
			sb.append(",score_chambre_rea_ajust=" + String.valueOf(score_chambre_rea_ajust));
			sb.append(",nb_rep_score_repas_rea_ajust=" + String.valueOf(nb_rep_score_repas_rea_ajust));
			sb.append(",score_repas_rea_ajust=" + String.valueOf(score_repas_rea_ajust));
			sb.append(",nb_rep_score_sortie_rea_ajust=" + String.valueOf(nb_rep_score_sortie_rea_ajust));
			sb.append(",score_sortie_rea_ajust=" + String.valueOf(score_sortie_rea_ajust));
			sb.append(",taux_reco_brut=" + taux_reco_brut);
			sb.append(",nb_reco_brut=" + String.valueOf(nb_reco_brut));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				satisfactionStruct satisfaction = new satisfactionStruct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "satisfaction");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				satisfactionStruct satisfaction_tmp = new satisfactionStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:OpNv+Ynm/h9RhyVZOOJvmQOetSTp6mQae4N86w==");
				String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
				if (password_tFileInputExcel_2.isEmpty()) {
					password_tFileInputExcel_2 = null;
				}
				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = "C:/Users/bapti/ProjectBigData-GRP6/ETL project/ETL_PROJECT/resources/inputs/resultats-esatis48h-mco-open-data-2020.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_2), password_tFileInputExcel_2);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_2, password_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2) {
						sheetList_tFileInputExcel_2
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_2);
					}
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 1;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET", sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
							}
							row1 = null;
							int tempRowLength_tFileInputExcel_2 = 25;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2
										? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i + start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "finess";

									row1.finess = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.finess = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "rs_finess";

									row1.rs_finess = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.rs_finess = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "finess_geo";

									row1.finess_geo = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.finess_geo = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 3;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "rs_finess_geo";

									row1.rs_finess_geo = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.rs_finess_geo = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 4;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "region";

									row1.region = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.region = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 5;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "participation";

									row1.participation = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.participation = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 6;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Depot";

									row1.Depot = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.Depot = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 7;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_rep_score_all_rea_ajust";

									row1.nb_rep_score_all_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													null, '.' == decimalChar_tFileInputExcel_2 ? null
															: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_rep_score_all_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 8;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "score_all_rea_ajust";

									row1.score_all_rea_ajust = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.score_all_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 9;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "classement";

									row1.classement = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.classement = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 10;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "evolution";

									row1.evolution = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.evolution = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 11;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_rep_score_accueil_rea_ajust";

									row1.nb_rep_score_accueil_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													null, '.' == decimalChar_tFileInputExcel_2 ? null
															: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_rep_score_accueil_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 12;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "score_accueil_rea_ajust";

									row1.score_accueil_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row1.score_accueil_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 13;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_rep_score_PECinf_rea_ajust";

									row1.nb_rep_score_PECinf_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													null, '.' == decimalChar_tFileInputExcel_2 ? null
															: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_rep_score_PECinf_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 14;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "score_PECinf_rea_ajust";

									row1.score_PECinf_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row1.score_PECinf_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 15;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_rep_score_PECmed_rea_ajust";

									row1.nb_rep_score_PECmed_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													null, '.' == decimalChar_tFileInputExcel_2 ? null
															: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_rep_score_PECmed_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 16;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "score_PECmed_rea_ajust";

									row1.score_PECmed_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row1.score_PECmed_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 17;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_rep_score_chambre_rea_ajust";

									row1.nb_rep_score_chambre_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													null, '.' == decimalChar_tFileInputExcel_2 ? null
															: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_rep_score_chambre_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 18;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "score_chambre_rea_ajust";

									row1.score_chambre_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row1.score_chambre_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 19;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_rep_score_repas_rea_ajust";

									row1.nb_rep_score_repas_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													null, '.' == decimalChar_tFileInputExcel_2 ? null
															: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_rep_score_repas_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 20;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "score_repas_rea_ajust";

									row1.score_repas_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row1.score_repas_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 21;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_rep_score_sortie_rea_ajust";

									row1.nb_rep_score_sortie_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													null, '.' == decimalChar_tFileInputExcel_2 ? null
															: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_rep_score_sortie_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 22;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "score_sortie_rea_ajust";

									row1.score_sortie_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row1.score_sortie_rea_ajust = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 23;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "taux_reco_brut";

									row1.taux_reco_brut = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row1.taux_reco_brut = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 24;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nb_reco_brut";

									row1.nb_reco_brut = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row1.nb_reco_brut = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									satisfaction = null;

// # Output table : 'satisfaction'
									satisfaction_tmp.finess = row1.finess;
									satisfaction_tmp.rs_finess = row1.rs_finess;
									satisfaction_tmp.score_accueil = row1.score_accueil_rea_ajust;
									satisfaction_tmp.score_prise_en_charge_inf = row1.score_PECinf_rea_ajust;
									satisfaction_tmp.score_prise_en_charge_med = row1.score_PECmed_rea_ajust;
									satisfaction_tmp.score_chambre = row1.score_chambre_rea_ajust;
									satisfaction_tmp.score_repas = row1.score_repas_rea_ajust;
									satisfaction_tmp.score_sortie = row1.score_sortie_rea_ajust;
									satisfaction_tmp.taux_recommandation = (row1.taux_reco_brut == null
											|| row1.taux_reco_brut.trim().equals("")) ? null
													: Float.parseFloat(row1.taux_reco_brut.replace(",", "."));
									satisfaction = satisfaction_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "satisfaction"
								if (satisfaction != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "satisfaction");
									}

///////////////////////		

									strBuffer_tLogRow_1 = new StringBuilder();

									if (satisfaction.finess != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(satisfaction.finess));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.rs_finess != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(satisfaction.rs_finess));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.score_accueil != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.formatUnwithE(satisfaction.score_accueil));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.score_prise_en_charge_inf != null) { //

										strBuffer_tLogRow_1.append(
												FormatterUtils.formatUnwithE(satisfaction.score_prise_en_charge_inf));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.score_prise_en_charge_med != null) { //

										strBuffer_tLogRow_1.append(
												FormatterUtils.formatUnwithE(satisfaction.score_prise_en_charge_med));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.score_chambre != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.formatUnwithE(satisfaction.score_chambre));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.score_repas != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.formatUnwithE(satisfaction.score_repas));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.score_sortie != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.formatUnwithE(satisfaction.score_sortie));

									} //

									strBuffer_tLogRow_1.append("|");

									if (satisfaction.taux_recommandation != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.formatUnwithE(satisfaction.taux_recommandation));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
									}
									consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "satisfaction"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE", nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "satisfaction");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final satisfaction_2020 satisfaction_2020Class = new satisfaction_2020();

		int exitCode = satisfaction_2020Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = satisfaction_2020.class.getClassLoader()
					.getResourceAsStream("etl_project/satisfaction_2020_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = satisfaction_2020.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("INPUT_PATH", "id_String");
					context.INPUT_PATH = (String) context.getProperty("INPUT_PATH");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("INPUT_PATH")) {
				context.INPUT_PATH = (String) parentContextMap.get("INPUT_PATH");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		try {
			errorCode = null;
			Implicit_Context_RegexProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_Implicit_Context_Regex) {
			globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", -1);

			e_Implicit_Context_Regex.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_2) {
			globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : satisfaction_2020");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 104709 characters generated by Talend Open Studio for Big Data on the 24
 * octobre 2025 14:14:30 CEST
 ************************************************************************************************/