// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_project.loadetablissements_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: LoadEtablissements_job Purpose: etablissement<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class LoadEtablissements_job implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (INPUT_PATH != null) {

				this.setProperty("INPUT_PATH", INPUT_PATH.toString());

			}

		}

		public String INPUT_PATH;

		public String getINPUT_PATH() {
			return this.INPUT_PATH;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "LoadEtablissements_job";
	private final String projectName = "ETL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					LoadEtablissements_job.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(LoadEtablissements_job.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHDFSOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveCreateTable_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveCreateTable_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveCreateTable_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class d_etablissementStruct implements routines.system.IPersistableRow<d_etablissementStruct> {
		final static byte[] commonByteArrayLock_ETL_PROJECT_LoadEtablissements_job = new byte[0];
		static byte[] commonByteArray_ETL_PROJECT_LoadEtablissements_job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_eta;

		public int getId_eta() {
			return this.id_eta;
		}

		public String raison_sociale_site;

		public String getRaison_sociale_site() {
			return this.raison_sociale_site;
		}

		public String cedex;

		public String getCedex() {
			return this.cedex;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String identifiant_organisation;

		public String getIdentifiant_organisation() {
			return this.identifiant_organisation;
		}

		public String siren_site;

		public String getSiren_site() {
			return this.siren_site;
		}

		public String siret_site;

		public String getSiret_site() {
			return this.siret_site;
		}

		public String telecopie;

		public String getTelecopie() {
			return this.telecopie;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephone_2;

		public String getTelephone_2() {
			return this.telephone_2;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_eta;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final d_etablissementStruct other = (d_etablissementStruct) obj;

			if (this.id_eta != other.id_eta)
				return false;

			return true;
		}

		public void copyDataTo(d_etablissementStruct other) {

			other.id_eta = this.id_eta;
			other.raison_sociale_site = this.raison_sociale_site;
			other.cedex = this.cedex;
			other.email = this.email;
			other.identifiant_organisation = this.identifiant_organisation;
			other.siren_site = this.siren_site;
			other.siret_site = this.siret_site;
			other.telecopie = this.telecopie;
			other.telephone = this.telephone;
			other.telephone_2 = this.telephone_2;

		}

		public void copyKeysDataTo(d_etablissementStruct other) {

			other.id_eta = this.id_eta;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PROJECT_LoadEtablissements_job.length) {
					if (length < 1024 && commonByteArray_ETL_PROJECT_LoadEtablissements_job.length == 0) {
						commonByteArray_ETL_PROJECT_LoadEtablissements_job = new byte[1024];
					} else {
						commonByteArray_ETL_PROJECT_LoadEtablissements_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PROJECT_LoadEtablissements_job, 0, length);
				strReturn = new String(commonByteArray_ETL_PROJECT_LoadEtablissements_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PROJECT_LoadEtablissements_job) {

				try {

					int length = 0;

					this.id_eta = dis.readInt();

					this.raison_sociale_site = readString(dis);

					this.cedex = readString(dis);

					this.email = readString(dis);

					this.identifiant_organisation = readString(dis);

					this.siren_site = readString(dis);

					this.siret_site = readString(dis);

					this.telecopie = readString(dis);

					this.telephone = readString(dis);

					this.telephone_2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_eta);

				// String

				writeString(this.raison_sociale_site, dos);

				// String

				writeString(this.cedex, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.identifiant_organisation, dos);

				// String

				writeString(this.siren_site, dos);

				// String

				writeString(this.siret_site, dos);

				// String

				writeString(this.telecopie, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephone_2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_eta=" + String.valueOf(id_eta));
			sb.append(",raison_sociale_site=" + raison_sociale_site);
			sb.append(",cedex=" + cedex);
			sb.append(",email=" + email);
			sb.append(",identifiant_organisation=" + identifiant_organisation);
			sb.append(",siren_site=" + siren_site);
			sb.append(",siret_site=" + siret_site);
			sb.append(",telecopie=" + telecopie);
			sb.append(",telephone=" + telephone);
			sb.append(",telephone_2=" + telephone_2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(d_etablissementStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_eta, other.id_eta);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ETL_PROJECT_LoadEtablissements_job = new byte[0];
		static byte[] commonByteArray_ETL_PROJECT_LoadEtablissements_job = new byte[0];

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String cedex;

		public String getCedex() {
			return this.cedex;
		}

		public String code_commune;

		public String getCode_commune() {
			return this.code_commune;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String commune;

		public String getCommune() {
			return this.commune;
		}

		public String complement_destinataire;

		public String getComplement_destinataire() {
			return this.complement_destinataire;
		}

		public String complement_point_geographique;

		public String getComplement_point_geographique() {
			return this.complement_point_geographique;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String enseigne_commerciale_site;

		public String getEnseigne_commerciale_site() {
			return this.enseigne_commerciale_site;
		}

		public String finess_etablissement_juridique;

		public String getFiness_etablissement_juridique() {
			return this.finess_etablissement_juridique;
		}

		public String finess_site;

		public String getFiness_site() {
			return this.finess_site;
		}

		public String identifiant_organisation;

		public String getIdentifiant_organisation() {
			return this.identifiant_organisation;
		}

		public String indice_repetition_voie;

		public String getIndice_repetition_voie() {
			return this.indice_repetition_voie;
		}

		public String mention_distribution;

		public String getMention_distribution() {
			return this.mention_distribution;
		}

		public String numero_voie;

		public String getNumero_voie() {
			return this.numero_voie;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String raison_sociale_site;

		public String getRaison_sociale_site() {
			return this.raison_sociale_site;
		}

		public String siren_site;

		public String getSiren_site() {
			return this.siren_site;
		}

		public String siret_site;

		public String getSiret_site() {
			return this.siret_site;
		}

		public String telecopie;

		public String getTelecopie() {
			return this.telecopie;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String telephone_2;

		public String getTelephone_2() {
			return this.telephone_2;
		}

		public String type_voie;

		public String getType_voie() {
			return this.type_voie;
		}

		public String voie;

		public String getVoie() {
			return this.voie;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PROJECT_LoadEtablissements_job.length) {
					if (length < 1024 && commonByteArray_ETL_PROJECT_LoadEtablissements_job.length == 0) {
						commonByteArray_ETL_PROJECT_LoadEtablissements_job = new byte[1024];
					} else {
						commonByteArray_ETL_PROJECT_LoadEtablissements_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PROJECT_LoadEtablissements_job, 0, length);
				strReturn = new String(commonByteArray_ETL_PROJECT_LoadEtablissements_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PROJECT_LoadEtablissements_job) {

				try {

					int length = 0;

					this.adresse = readString(dis);

					this.cedex = readString(dis);

					this.code_commune = readString(dis);

					this.code_postal = readString(dis);

					this.commune = readString(dis);

					this.complement_destinataire = readString(dis);

					this.complement_point_geographique = readString(dis);

					this.email = readString(dis);

					this.enseigne_commerciale_site = readString(dis);

					this.finess_etablissement_juridique = readString(dis);

					this.finess_site = readString(dis);

					this.identifiant_organisation = readString(dis);

					this.indice_repetition_voie = readString(dis);

					this.mention_distribution = readString(dis);

					this.numero_voie = readString(dis);

					this.pays = readString(dis);

					this.raison_sociale_site = readString(dis);

					this.siren_site = readString(dis);

					this.siret_site = readString(dis);

					this.telecopie = readString(dis);

					this.telephone = readString(dis);

					this.telephone_2 = readString(dis);

					this.type_voie = readString(dis);

					this.voie = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.cedex, dos);

				// String

				writeString(this.code_commune, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.commune, dos);

				// String

				writeString(this.complement_destinataire, dos);

				// String

				writeString(this.complement_point_geographique, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.enseigne_commerciale_site, dos);

				// String

				writeString(this.finess_etablissement_juridique, dos);

				// String

				writeString(this.finess_site, dos);

				// String

				writeString(this.identifiant_organisation, dos);

				// String

				writeString(this.indice_repetition_voie, dos);

				// String

				writeString(this.mention_distribution, dos);

				// String

				writeString(this.numero_voie, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.raison_sociale_site, dos);

				// String

				writeString(this.siren_site, dos);

				// String

				writeString(this.siret_site, dos);

				// String

				writeString(this.telecopie, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.telephone_2, dos);

				// String

				writeString(this.type_voie, dos);

				// String

				writeString(this.voie, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse=" + adresse);
			sb.append(",cedex=" + cedex);
			sb.append(",code_commune=" + code_commune);
			sb.append(",code_postal=" + code_postal);
			sb.append(",commune=" + commune);
			sb.append(",complement_destinataire=" + complement_destinataire);
			sb.append(",complement_point_geographique=" + complement_point_geographique);
			sb.append(",email=" + email);
			sb.append(",enseigne_commerciale_site=" + enseigne_commerciale_site);
			sb.append(",finess_etablissement_juridique=" + finess_etablissement_juridique);
			sb.append(",finess_site=" + finess_site);
			sb.append(",identifiant_organisation=" + identifiant_organisation);
			sb.append(",indice_repetition_voie=" + indice_repetition_voie);
			sb.append(",mention_distribution=" + mention_distribution);
			sb.append(",numero_voie=" + numero_voie);
			sb.append(",pays=" + pays);
			sb.append(",raison_sociale_site=" + raison_sociale_site);
			sb.append(",siren_site=" + siren_site);
			sb.append(",siret_site=" + siret_site);
			sb.append(",telecopie=" + telecopie);
			sb.append(",telephone=" + telephone);
			sb.append(",telephone_2=" + telephone_2);
			sb.append(",type_voie=" + type_voie);
			sb.append(",voie=" + voie);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				d_etablissementStruct d_etablissement = new d_etablissementStruct();

				/**
				 * [tHDFSOutput_1 begin ] start
				 */

				ok_Hash.put("tHDFSOutput_1", false);
				start_Hash.put("tHDFSOutput_1", System.currentTimeMillis());

				currentComponent = "tHDFSOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "d_etablissement");
				}

				int tos_count_tHDFSOutput_1 = 0;

				String username_tHDFSOutput_1 = "";
				org.apache.hadoop.fs.FileSystem fs_tHDFSOutput_1 = null;
				org.apache.hadoop.conf.Configuration conf_tHDFSOutput_1 = new org.apache.hadoop.conf.Configuration();

				conf_tHDFSOutput_1.set("fs.default.name", context.Cloudera_VM_NameNodeUri);

				conf_tHDFSOutput_1.set("dfs.client.use.datanode.hostname", "true");

				org.apache.hadoop.security.UserGroupInformation.setConfiguration(conf_tHDFSOutput_1);
				username_tHDFSOutput_1 = "cloudera";
				if (username_tHDFSOutput_1 == null || "".equals(username_tHDFSOutput_1)) {
					fs_tHDFSOutput_1 = org.apache.hadoop.fs.FileSystem.get(conf_tHDFSOutput_1);
				} else {
					System.setProperty("HADOOP_USER_NAME", username_tHDFSOutput_1);
					fs_tHDFSOutput_1 = org.apache.hadoop.fs.FileSystem.get(
							new java.net.URI(conf_tHDFSOutput_1.get("fs.default.name")), conf_tHDFSOutput_1,
							username_tHDFSOutput_1);
				}

				org.apache.hadoop.fs.Path path_tHDFSOutput_1 = new org.apache.hadoop.fs.Path(
						"/user/cloudera/hive/warehouse/chu.db/d_etablissement.txt");
				int nb_line_tHDFSOutput_1 = 0;

				org.apache.hadoop.io.SequenceFile.Writer writer_tHDFSOutput_1 = new org.apache.hadoop.io.SequenceFile.Writer(
						fs_tHDFSOutput_1, conf_tHDFSOutput_1, path_tHDFSOutput_1,
						org.apache.hadoop.io.IntWritable.class, org.apache.hadoop.io.IntWritable.class);

				/**
				 * [tHDFSOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				d_etablissementStruct d_etablissement_tmp = new d_etablissementStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						context.INPUT_PATH + "etablissement_sante.csv"/** End field tFileInputDelimited_2:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();
								if (!(rowtFileInputDelimited_2.length == 1
										&& ("\015").equals(rowtFileInputDelimited_2[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_2)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.adresse = null;

								row1.cedex = null;

								row1.code_commune = null;

								row1.code_postal = null;

								row1.commune = null;

								row1.complement_destinataire = null;

								row1.complement_point_geographique = null;

								row1.email = null;

								row1.enseigne_commerciale_site = null;

								row1.finess_etablissement_juridique = null;

								row1.finess_site = null;

								row1.identifiant_organisation = null;

								row1.indice_repetition_voie = null;

								row1.mention_distribution = null;

								row1.numero_voie = null;

								row1.pays = null;

								row1.raison_sociale_site = null;

								row1.siren_site = null;

								row1.siret_site = null;

								row1.telecopie = null;

								row1.telephone = null;

								row1.telephone_2 = null;

								row1.type_voie = null;

								row1.voie = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.adresse = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.adresse = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.cedex = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.cedex = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.code_commune = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.code_commune = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.code_postal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.code_postal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.commune = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.commune = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.complement_destinataire = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.complement_destinataire = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.complement_point_geographique = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.complement_point_geographique = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.email = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.email = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.enseigne_commerciale_site = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.enseigne_commerciale_site = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.finess_etablissement_juridique = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.finess_etablissement_juridique = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.finess_site = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.finess_site = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.identifiant_organisation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.identifiant_organisation = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.indice_repetition_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.indice_repetition_voie = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.mention_distribution = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.mention_distribution = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.numero_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.numero_voie = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.pays = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.pays = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.raison_sociale_site = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.raison_sociale_site = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.siren_site = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.siren_site = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.siret_site = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.siret_site = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.telecopie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.telecopie = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.telephone = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.telephone = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.telephone_2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.telephone_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.type_voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.type_voie = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row1.voie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row1.voie = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								d_etablissement = null;

// # Output table : 'd_etablissement'
								d_etablissement_tmp.id_eta = 0;
								d_etablissement_tmp.raison_sociale_site = row1.raison_sociale_site;
								d_etablissement_tmp.cedex = row1.cedex;
								d_etablissement_tmp.email = row1.email;
								d_etablissement_tmp.identifiant_organisation = row1.identifiant_organisation;
								d_etablissement_tmp.siren_site = row1.siren_site;
								d_etablissement_tmp.siret_site = row1.siret_site;
								d_etablissement_tmp.telecopie = row1.telecopie;
								d_etablissement_tmp.telephone = row1.telephone;
								d_etablissement_tmp.telephone_2 = row1.telephone_2;
								d_etablissement = d_etablissement_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "d_etablissement"
							if (d_etablissement != null) {

								/**
								 * [tHDFSOutput_1 main ] start
								 */

								currentComponent = "tHDFSOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "d_etablissement");
								}

								writer_tHDFSOutput_1.append(
										new org.apache.hadoop.io.IntWritable(d_etablissement.id_eta),
										new org.apache.hadoop.io.IntWritable(d_etablissement.id_eta));

								nb_line_tHDFSOutput_1++;

								tos_count_tHDFSOutput_1++;

								/**
								 * [tHDFSOutput_1 main ] stop
								 */

								/**
								 * [tHDFSOutput_1 process_data_begin ] start
								 */

								currentComponent = "tHDFSOutput_1";

								/**
								 * [tHDFSOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tHDFSOutput_1 process_data_end ] start
								 */

								currentComponent = "tHDFSOutput_1";

								/**
								 * [tHDFSOutput_1 process_data_end ] stop
								 */

							} // End of branch "d_etablissement"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tHDFSOutput_1 end ] start
				 */

				currentComponent = "tHDFSOutput_1";

				writer_tHDFSOutput_1.close();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "d_etablissement");
				}

				ok_Hash.put("tHDFSOutput_1", true);
				end_Hash.put("tHDFSOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tHiveCreateTable_1Process(globalMap);

				/**
				 * [tHDFSOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tHDFSOutput_1 finally ] start
				 */

				currentComponent = "tHDFSOutput_1";

				/**
				 * [tHDFSOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tHiveCreateTable_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveCreateTable_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveCreateTable_1 begin ] start
				 */

				ok_Hash.put("tHiveCreateTable_1", false);
				start_Hash.put("tHiveCreateTable_1", System.currentTimeMillis());

				currentComponent = "tHiveCreateTable_1";

				int tos_count_tHiveCreateTable_1 = 0;

				/**
				 * [tHiveCreateTable_1 begin ] stop
				 */

				/**
				 * [tHiveCreateTable_1 main ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				java.sql.Connection conn_tHiveCreateTable_1 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				String dbUser_tHiveCreateTable_1 = "cloudera";

				final String decryptedPassword_tHiveCreateTable_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:EUdBwD5zr0flq3Lon04JVNrghZEYjQs8lt1xWg==");

				String dbPwd_tHiveCreateTable_1 = decryptedPassword_tHiveCreateTable_1;

				globalMap.put("HADOOP_USER_NAME_tHiveCreateTable_1", System.getProperty("HADOOP_USER_NAME"));
				String url_tHiveCreateTable_1 = "jdbc:hive2://" + "quickstart.cloudera" + ":" + "10000" + "/" + "chu";
				String additionalJdbcSettings_tHiveCreateTable_1 = "";
				if (!"".equals(additionalJdbcSettings_tHiveCreateTable_1.trim())) {
					if (!additionalJdbcSettings_tHiveCreateTable_1.startsWith(";")) {
						additionalJdbcSettings_tHiveCreateTable_1 = ";" + additionalJdbcSettings_tHiveCreateTable_1;
					}
					url_tHiveCreateTable_1 += additionalJdbcSettings_tHiveCreateTable_1;
				}
				String driverClass_tHiveCreateTable_1 = "org.apache.hive.jdbc.HiveDriver";
				java.lang.Class.forName(driverClass_tHiveCreateTable_1);

				conn_tHiveCreateTable_1 = java.sql.DriverManager.getConnection(url_tHiveCreateTable_1,
						dbUser_tHiveCreateTable_1, dbPwd_tHiveCreateTable_1);

				java.sql.Statement init_tHiveCreateTable_1 = conn_tHiveCreateTable_1.createStatement();
				init_tHiveCreateTable_1.execute("SET dfs.client.use.datanode.hostname=true");

				init_tHiveCreateTable_1.close();

				String dbname_tHiveCreateTable_1 = "chu";
				if (dbname_tHiveCreateTable_1 != null && !"".equals(dbname_tHiveCreateTable_1.trim())
						&& !"default".equals(dbname_tHiveCreateTable_1.trim())) {
					java.sql.Statement goToDatabase_tHiveCreateTable_1 = conn_tHiveCreateTable_1.createStatement();
					goToDatabase_tHiveCreateTable_1.execute("use " + dbname_tHiveCreateTable_1);
					goToDatabase_tHiveCreateTable_1.close();
				}

				java.sql.Statement stmt_tHiveCreateTable_1 = conn_tHiveCreateTable_1.createStatement();
				String query_tHiveCreateTable_1 = "";
				String tableName_tHiveCreateTable_1 = "f_hospitalisation";
				String storageClass_tHiveCreateTable_1 = "";
				String location_tHiveCreateTable_1 = "/user/cloudera/hive/warehouse/dw_healthcare.db/";
				String querySQL_tHiveCreateTable_1 = "CREATE  TABLE  " + tableName_tHiveCreateTable_1 + "() STORED BY '"
						+ storageClass_tHiveCreateTable_1 + "' LOCATION '" + location_tHiveCreateTable_1 + "'";
				try {

					java.text.DateFormat dateStrFormat_tHiveCreateTable_1 = new java.text.SimpleDateFormat(
							"yyyyMMddHHmmss");
					final String queryIdentifier_tHiveCreateTable_1 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveCreateTable_1_"
							+ dateStrFormat_tHiveCreateTable_1.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveCreateTable_1.execute("set mapred.job.name=" + queryIdentifier_tHiveCreateTable_1);
					stmt_tHiveCreateTable_1.execute(querySQL_tHiveCreateTable_1);
				} catch (java.sql.SQLException e_tHiveCreateTable_1) {
					System.err.println(e_tHiveCreateTable_1.getMessage());
				}
				stmt_tHiveCreateTable_1.close();

				conn_tHiveCreateTable_1.close();

				globalMap.put("tHiveCreateTable_1_QUERY", querySQL_tHiveCreateTable_1);

				String currentClientPathSeparator_tHiveCreateTable_1 = (String) globalMap
						.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveCreateTable_1 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveCreateTable_1);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveCreateTable_1 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveCreateTable_1 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveCreateTable_1);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveCreateTable_1 = (String) globalMap
						.get("HADOOP_USER_NAME_tHiveCreateTable_1");
				if (originalHadoopUsername_tHiveCreateTable_1 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveCreateTable_1);
					globalMap.put("HADOOP_USER_NAME_tHiveCreateTable_1", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				tos_count_tHiveCreateTable_1++;

				/**
				 * [tHiveCreateTable_1 main ] stop
				 */

				/**
				 * [tHiveCreateTable_1 process_data_begin ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				/**
				 * [tHiveCreateTable_1 process_data_begin ] stop
				 */

				/**
				 * [tHiveCreateTable_1 process_data_end ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				/**
				 * [tHiveCreateTable_1 process_data_end ] stop
				 */

				/**
				 * [tHiveCreateTable_1 end ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				ok_Hash.put("tHiveCreateTable_1", true);
				end_Hash.put("tHiveCreateTable_1", System.currentTimeMillis());

				/**
				 * [tHiveCreateTable_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveCreateTable_1 finally ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				/**
				 * [tHiveCreateTable_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveCreateTable_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final LoadEtablissements_job LoadEtablissements_jobClass = new LoadEtablissements_job();

		int exitCode = LoadEtablissements_jobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = LoadEtablissements_job.class.getClassLoader().getResourceAsStream(
					"etl_project/loadetablissements_job_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = LoadEtablissements_job.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("INPUT_PATH", "id_String");
					context.INPUT_PATH = (String) context.getProperty("INPUT_PATH");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("INPUT_PATH")) {
				context.INPUT_PATH = (String) parentContextMap.get("INPUT_PATH");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : LoadEtablissements_job");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 79009 characters generated by Talend Open Studio for Big Data on the 24
 * octobre 2025 18:09:15 CEST
 ************************************************************************************************/