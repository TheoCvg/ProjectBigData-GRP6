// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_project.hospitalisations_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: hospitalisations Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 7.3.1.20200219_1130
 * @status
 */
public class hospitalisations implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (INPUT_PATH != null) {

				this.setProperty("INPUT_PATH", INPUT_PATH.toString());

			}

			if (Cloudera_VM_NameNodeUri != null) {

				this.setProperty("Cloudera_VM_NameNodeUri", Cloudera_VM_NameNodeUri.toString());

			}

			if (Cloudera_VM_User != null) {

				this.setProperty("Cloudera_VM_User", Cloudera_VM_User.toString());

			}

			if (Hadoop_Home != null) {

				this.setProperty("Hadoop_Home", Hadoop_Home.toString());

			}

			if (Cloudera_VM_ResourceManagerScheduler != null) {

				this.setProperty("Cloudera_VM_ResourceManagerScheduler",
						Cloudera_VM_ResourceManagerScheduler.toString());

			}

			if (Cloudera_VM_JobHistory != null) {

				this.setProperty("Cloudera_VM_JobHistory", Cloudera_VM_JobHistory.toString());

			}

			if (Cloudera_VM_ResourceManager != null) {

				this.setProperty("Cloudera_VM_ResourceManager", Cloudera_VM_ResourceManager.toString());

			}

			if (Cloudera_VM_hadoopConfSpecificJar != null) {

				this.setProperty("Cloudera_VM_hadoopConfSpecificJar", Cloudera_VM_hadoopConfSpecificJar.toString());

			}

		}

		public String INPUT_PATH;

		public String getINPUT_PATH() {
			return this.INPUT_PATH;
		}

		public String Cloudera_VM_NameNodeUri;

		public String getCloudera_VM_NameNodeUri() {
			return this.Cloudera_VM_NameNodeUri;
		}

		public String Cloudera_VM_User;

		public String getCloudera_VM_User() {
			return this.Cloudera_VM_User;
		}

		public String Hadoop_Home;

		public String getHadoop_Home() {
			return this.Hadoop_Home;
		}

		public String Cloudera_VM_ResourceManagerScheduler;

		public String getCloudera_VM_ResourceManagerScheduler() {
			return this.Cloudera_VM_ResourceManagerScheduler;
		}

		public String Cloudera_VM_JobHistory;

		public String getCloudera_VM_JobHistory() {
			return this.Cloudera_VM_JobHistory;
		}

		public String Cloudera_VM_ResourceManager;

		public String getCloudera_VM_ResourceManager() {
			return this.Cloudera_VM_ResourceManager;
		}

		public String Cloudera_VM_hadoopConfSpecificJar;

		public String getCloudera_VM_hadoopConfSpecificJar() {
			return this.Cloudera_VM_hadoopConfSpecificJar;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "hospitalisations";
	private final String projectName = "ETL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					hospitalisations.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(hospitalisations.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHDFSOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHiveCreateTable_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHiveCreateTable_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHiveCreateTable_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class f_hospitalisations_outStruct
			implements routines.system.IPersistableRow<f_hospitalisations_outStruct> {
		final static byte[] commonByteArrayLock_ETL_PROJECT_hospitalisations = new byte[0];
		static byte[] commonByteArray_ETL_PROJECT_hospitalisations = new byte[0];

		public Integer Id_hos;

		public Integer getId_hos() {
			return this.Id_hos;
		}

		public Integer Hospitalization_days;

		public Integer getHospitalization_days() {
			return this.Hospitalization_days;
		}

		public Integer Patient;

		public Integer getPatient() {
			return this.Patient;
		}

		public String Consultation_diagnostic;

		public String getConsultation_diagnostic() {
			return this.Consultation_diagnostic;
		}

		public String Diagnostic;

		public String getDiagnostic() {
			return this.Diagnostic;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PROJECT_hospitalisations.length) {
					if (length < 1024 && commonByteArray_ETL_PROJECT_hospitalisations.length == 0) {
						commonByteArray_ETL_PROJECT_hospitalisations = new byte[1024];
					} else {
						commonByteArray_ETL_PROJECT_hospitalisations = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PROJECT_hospitalisations, 0, length);
				strReturn = new String(commonByteArray_ETL_PROJECT_hospitalisations, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PROJECT_hospitalisations) {

				try {

					int length = 0;

					this.Id_hos = readInteger(dis);

					this.Hospitalization_days = readInteger(dis);

					this.Patient = readInteger(dis);

					this.Consultation_diagnostic = readString(dis);

					this.Diagnostic = readString(dis);

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Id_hos, dos);

				// Integer

				writeInteger(this.Hospitalization_days, dos);

				// Integer

				writeInteger(this.Patient, dos);

				// String

				writeString(this.Consultation_diagnostic, dos);

				// String

				writeString(this.Diagnostic, dos);

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id_hos=" + String.valueOf(Id_hos));
			sb.append(",Hospitalization_days=" + String.valueOf(Hospitalization_days));
			sb.append(",Patient=" + String.valueOf(Patient));
			sb.append(",Consultation_diagnostic=" + Consultation_diagnostic);
			sb.append(",Diagnostic=" + Diagnostic);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(f_hospitalisations_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ETL_PROJECT_hospitalisations = new byte[0];
		static byte[] commonByteArray_ETL_PROJECT_hospitalisations = new byte[0];

		public Integer Num_Hospitalisation;

		public Integer getNum_Hospitalisation() {
			return this.Num_Hospitalisation;
		}

		public Integer Id_patient;

		public Integer getId_patient() {
			return this.Id_patient;
		}

		public String identifiant_organisation;

		public String getIdentifiant_organisation() {
			return this.identifiant_organisation;
		}

		public String Code_diagnostic;

		public String getCode_diagnostic() {
			return this.Code_diagnostic;
		}

		public String Suite_diagnostic_consultation;

		public String getSuite_diagnostic_consultation() {
			return this.Suite_diagnostic_consultation;
		}

		public String Date_Entree;

		public String getDate_Entree() {
			return this.Date_Entree;
		}

		public Integer Jour_Hospitalisation;

		public Integer getJour_Hospitalisation() {
			return this.Jour_Hospitalisation;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PROJECT_hospitalisations.length) {
					if (length < 1024 && commonByteArray_ETL_PROJECT_hospitalisations.length == 0) {
						commonByteArray_ETL_PROJECT_hospitalisations = new byte[1024];
					} else {
						commonByteArray_ETL_PROJECT_hospitalisations = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PROJECT_hospitalisations, 0, length);
				strReturn = new String(commonByteArray_ETL_PROJECT_hospitalisations, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PROJECT_hospitalisations) {

				try {

					int length = 0;

					this.Num_Hospitalisation = readInteger(dis);

					this.Id_patient = readInteger(dis);

					this.identifiant_organisation = readString(dis);

					this.Code_diagnostic = readString(dis);

					this.Suite_diagnostic_consultation = readString(dis);

					this.Date_Entree = readString(dis);

					this.Jour_Hospitalisation = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_Hospitalisation, dos);

				// Integer

				writeInteger(this.Id_patient, dos);

				// String

				writeString(this.identifiant_organisation, dos);

				// String

				writeString(this.Code_diagnostic, dos);

				// String

				writeString(this.Suite_diagnostic_consultation, dos);

				// String

				writeString(this.Date_Entree, dos);

				// Integer

				writeInteger(this.Jour_Hospitalisation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_Hospitalisation=" + String.valueOf(Num_Hospitalisation));
			sb.append(",Id_patient=" + String.valueOf(Id_patient));
			sb.append(",identifiant_organisation=" + identifiant_organisation);
			sb.append(",Code_diagnostic=" + Code_diagnostic);
			sb.append(",Suite_diagnostic_consultation=" + Suite_diagnostic_consultation);
			sb.append(",Date_Entree=" + Date_Entree);
			sb.append(",Jour_Hospitalisation=" + String.valueOf(Jour_Hospitalisation));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				f_hospitalisations_outStruct f_hospitalisations_out = new f_hospitalisations_outStruct();

				/**
				 * [tHDFSOutput_1 begin ] start
				 */

				ok_Hash.put("tHDFSOutput_1", false);
				start_Hash.put("tHDFSOutput_1", System.currentTimeMillis());

				currentComponent = "tHDFSOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "f_hospitalisations_out");
				}

				int tos_count_tHDFSOutput_1 = 0;

				String username_tHDFSOutput_1 = "";
				org.apache.hadoop.fs.FileSystem fs_tHDFSOutput_1 = null;
				org.apache.hadoop.conf.Configuration conf_tHDFSOutput_1 = new org.apache.hadoop.conf.Configuration();

				conf_tHDFSOutput_1.set("fs.default.name", context.Cloudera_VM_NameNodeUri);

				conf_tHDFSOutput_1.set("dfs.client.use.datanode.hostname", "true");

				org.apache.hadoop.security.UserGroupInformation.setConfiguration(conf_tHDFSOutput_1);
				username_tHDFSOutput_1 = "cloudera";
				if (username_tHDFSOutput_1 == null || "".equals(username_tHDFSOutput_1)) {
					fs_tHDFSOutput_1 = org.apache.hadoop.fs.FileSystem.get(conf_tHDFSOutput_1);
				} else {
					System.setProperty("HADOOP_USER_NAME", username_tHDFSOutput_1);
					fs_tHDFSOutput_1 = org.apache.hadoop.fs.FileSystem.get(
							new java.net.URI(conf_tHDFSOutput_1.get("fs.default.name")), conf_tHDFSOutput_1,
							username_tHDFSOutput_1);
				}

				org.apache.hadoop.fs.Path path_tHDFSOutput_1 = new org.apache.hadoop.fs.Path(
						"/user/cloudera/hive/warehouse/chu.db/f_hospitalisation.txt");
				int nb_line_tHDFSOutput_1 = 0;

				org.apache.hadoop.fs.FSDataOutputStream fsDataOutputStream_tHDFSOutput_1 = null;

				fsDataOutputStream_tHDFSOutput_1 = fs_tHDFSOutput_1.create(path_tHDFSOutput_1, true);

				java.io.Writer outtHDFSOutput_1 = null;
				outtHDFSOutput_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(fsDataOutputStream_tHDFSOutput_1));

				/**
				 * [tHDFSOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				f_hospitalisations_outStruct f_hospitalisations_out_tmp = new f_hospitalisations_outStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						context.INPUT_PATH + "Hospitalisations.csv"/** End field tFileInputDelimited_1:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
								if (!(rowtFileInputDelimited_1.length == 1
										&& ("\015").equals(rowtFileInputDelimited_1[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_1)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.Num_Hospitalisation = null;

								row1.Id_patient = null;

								row1.identifiant_organisation = null;

								row1.Code_diagnostic = null;

								row1.Suite_diagnostic_consultation = null;

								row1.Date_Entree = null;

								row1.Jour_Hospitalisation = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Num_Hospitalisation = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Num_Hospitalisation", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Num_Hospitalisation = null;

									}

								} else {

									row1.Num_Hospitalisation = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Id_patient = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Id_patient", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Id_patient = null;

									}

								} else {

									row1.Id_patient = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.identifiant_organisation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.identifiant_organisation = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Code_diagnostic = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Code_diagnostic = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Suite_diagnostic_consultation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Suite_diagnostic_consultation = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Date_Entree = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Date_Entree = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Jour_Hospitalisation = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Jour_Hospitalisation", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Jour_Hospitalisation = null;

									}

								} else {

									row1.Jour_Hospitalisation = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								f_hospitalisations_out = null;

// # Output table : 'f_hospitalisations_out'
								f_hospitalisations_out_tmp.Id_hos = row1.Num_Hospitalisation;
								f_hospitalisations_out_tmp.Hospitalization_days = row1.Jour_Hospitalisation;
								f_hospitalisations_out_tmp.Patient = row1.Id_patient;
								f_hospitalisations_out_tmp.Consultation_diagnostic = row1.Suite_diagnostic_consultation;
								f_hospitalisations_out_tmp.Diagnostic = row1.Code_diagnostic;
								f_hospitalisations_out_tmp.Date = row1.Date_Entree != null
										&& !"".equals(row1.Date_Entree)
												? TalendDate.parseDate("dd/MM/yyyy", row1.Date_Entree)
												: null;
								f_hospitalisations_out = f_hospitalisations_out_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "f_hospitalisations_out"
							if (f_hospitalisations_out != null) {

								/**
								 * [tHDFSOutput_1 main ] start
								 */

								currentComponent = "tHDFSOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "f_hospitalisations_out");
								}

								StringBuilder sb_tHDFSOutput_1 = new StringBuilder();

								if (f_hospitalisations_out.Id_hos != null) {

									sb_tHDFSOutput_1.append(

											f_hospitalisations_out.Id_hos

									);

								}

								sb_tHDFSOutput_1.append(";");

								if (f_hospitalisations_out.Hospitalization_days != null) {

									sb_tHDFSOutput_1.append(

											f_hospitalisations_out.Hospitalization_days

									);

								}

								sb_tHDFSOutput_1.append(";");

								if (f_hospitalisations_out.Patient != null) {

									sb_tHDFSOutput_1.append(

											f_hospitalisations_out.Patient

									);

								}

								sb_tHDFSOutput_1.append(";");

								if (f_hospitalisations_out.Consultation_diagnostic != null) {

									sb_tHDFSOutput_1.append(

											f_hospitalisations_out.Consultation_diagnostic

									);

								}

								sb_tHDFSOutput_1.append(";");

								if (f_hospitalisations_out.Diagnostic != null) {

									sb_tHDFSOutput_1.append(

											f_hospitalisations_out.Diagnostic

									);

								}

								sb_tHDFSOutput_1.append(";");

								if (f_hospitalisations_out.Date != null) {

									sb_tHDFSOutput_1.append(

											FormatterUtils.format_Date(f_hospitalisations_out.Date, "dd-MM-yyyy")

									);

								}

								sb_tHDFSOutput_1.append("\n");

								outtHDFSOutput_1.write(sb_tHDFSOutput_1.toString());

								nb_line_tHDFSOutput_1++;

								tos_count_tHDFSOutput_1++;

								/**
								 * [tHDFSOutput_1 main ] stop
								 */

								/**
								 * [tHDFSOutput_1 process_data_begin ] start
								 */

								currentComponent = "tHDFSOutput_1";

								/**
								 * [tHDFSOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tHDFSOutput_1 process_data_end ] start
								 */

								currentComponent = "tHDFSOutput_1";

								/**
								 * [tHDFSOutput_1 process_data_end ] stop
								 */

							} // End of branch "f_hospitalisations_out"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tHDFSOutput_1 end ] start
				 */

				currentComponent = "tHDFSOutput_1";

				if (outtHDFSOutput_1 != null) {
					outtHDFSOutput_1.close();
				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "f_hospitalisations_out");
				}

				ok_Hash.put("tHDFSOutput_1", true);
				end_Hash.put("tHDFSOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tHiveCreateTable_1Process(globalMap);

				/**
				 * [tHDFSOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tHDFSOutput_1 finally ] start
				 */

				currentComponent = "tHDFSOutput_1";

				/**
				 * [tHDFSOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tHiveCreateTable_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHiveCreateTable_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tHiveCreateTable_1 begin ] start
				 */

				ok_Hash.put("tHiveCreateTable_1", false);
				start_Hash.put("tHiveCreateTable_1", System.currentTimeMillis());

				currentComponent = "tHiveCreateTable_1";

				int tos_count_tHiveCreateTable_1 = 0;

				/**
				 * [tHiveCreateTable_1 begin ] stop
				 */

				/**
				 * [tHiveCreateTable_1 main ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				java.sql.Connection conn_tHiveCreateTable_1 = null;
				globalMap.put("current_client_path_separator", System.getProperty("path.separator"));
				System.setProperty("path.separator", ":");
				String dbUser_tHiveCreateTable_1 = "cloudera";

				final String decryptedPassword_tHiveCreateTable_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Oy4dO0ahEW416IFepqGYVSYLDDkI8i1LQPQODQ==");

				String dbPwd_tHiveCreateTable_1 = decryptedPassword_tHiveCreateTable_1;

				globalMap.put("HADOOP_USER_NAME_tHiveCreateTable_1", System.getProperty("HADOOP_USER_NAME"));
				String url_tHiveCreateTable_1 = "jdbc:hive2://" + "quickstart.cloudera" + ":" + "10000" + "/" + "chu";
				String additionalJdbcSettings_tHiveCreateTable_1 = "";
				if (!"".equals(additionalJdbcSettings_tHiveCreateTable_1.trim())) {
					if (!additionalJdbcSettings_tHiveCreateTable_1.startsWith(";")) {
						additionalJdbcSettings_tHiveCreateTable_1 = ";" + additionalJdbcSettings_tHiveCreateTable_1;
					}
					url_tHiveCreateTable_1 += additionalJdbcSettings_tHiveCreateTable_1;
				}
				String driverClass_tHiveCreateTable_1 = "org.apache.hive.jdbc.HiveDriver";
				java.lang.Class.forName(driverClass_tHiveCreateTable_1);

				conn_tHiveCreateTable_1 = java.sql.DriverManager.getConnection(url_tHiveCreateTable_1,
						dbUser_tHiveCreateTable_1, dbPwd_tHiveCreateTable_1);

				java.sql.Statement init_tHiveCreateTable_1 = conn_tHiveCreateTable_1.createStatement();
				init_tHiveCreateTable_1.execute("SET dfs.client.use.datanode.hostname=true");

				init_tHiveCreateTable_1.close();

				String dbname_tHiveCreateTable_1 = "chu";
				if (dbname_tHiveCreateTable_1 != null && !"".equals(dbname_tHiveCreateTable_1.trim())
						&& !"default".equals(dbname_tHiveCreateTable_1.trim())) {
					java.sql.Statement goToDatabase_tHiveCreateTable_1 = conn_tHiveCreateTable_1.createStatement();
					goToDatabase_tHiveCreateTable_1.execute("use " + dbname_tHiveCreateTable_1);
					goToDatabase_tHiveCreateTable_1.close();
				}

				java.sql.Statement stmt_tHiveCreateTable_1 = conn_tHiveCreateTable_1.createStatement();
				String query_tHiveCreateTable_1 = "";
				String tableName_tHiveCreateTable_1 = "f_hospitalisation";
				String storageClass_tHiveCreateTable_1 = "";
				String location_tHiveCreateTable_1 = "/user/cloudera/hive/warehouse/dw_healthcare.db/";
				String querySQL_tHiveCreateTable_1 = "CREATE  TABLE  " + tableName_tHiveCreateTable_1 + "() STORED BY '"
						+ storageClass_tHiveCreateTable_1 + "' LOCATION '" + location_tHiveCreateTable_1 + "'";
				try {

					java.text.DateFormat dateStrFormat_tHiveCreateTable_1 = new java.text.SimpleDateFormat(
							"yyyyMMddHHmmss");
					final String queryIdentifier_tHiveCreateTable_1 = projectName + "_" + jobName + "_"
							+ jobVersion.replace(".", "_") + "_tHiveCreateTable_1_"
							+ dateStrFormat_tHiveCreateTable_1.format(new Date(startTime));
// For MapReduce Mode
					stmt_tHiveCreateTable_1.execute("set mapred.job.name=" + queryIdentifier_tHiveCreateTable_1);
					stmt_tHiveCreateTable_1.execute(querySQL_tHiveCreateTable_1);
				} catch (java.sql.SQLException e_tHiveCreateTable_1) {
					System.err.println(e_tHiveCreateTable_1.getMessage());
				}
				stmt_tHiveCreateTable_1.close();

				conn_tHiveCreateTable_1.close();

				globalMap.put("tHiveCreateTable_1_QUERY", querySQL_tHiveCreateTable_1);

				String currentClientPathSeparator_tHiveCreateTable_1 = (String) globalMap
						.get("current_client_path_separator");
				if (currentClientPathSeparator_tHiveCreateTable_1 != null) {
					System.setProperty("path.separator", currentClientPathSeparator_tHiveCreateTable_1);
					globalMap.put("current_client_path_separator", null);
				}

				String currentClientUsername_tHiveCreateTable_1 = (String) globalMap.get("current_client_user_name");
				if (currentClientUsername_tHiveCreateTable_1 != null) {
					System.setProperty("user.name", currentClientUsername_tHiveCreateTable_1);
					globalMap.put("current_client_user_name", null);
				}

				String originalHadoopUsername_tHiveCreateTable_1 = (String) globalMap
						.get("HADOOP_USER_NAME_tHiveCreateTable_1");
				if (originalHadoopUsername_tHiveCreateTable_1 != null) {
					System.setProperty("HADOOP_USER_NAME", originalHadoopUsername_tHiveCreateTable_1);
					globalMap.put("HADOOP_USER_NAME_tHiveCreateTable_1", null);
				} else {
					System.clearProperty("HADOOP_USER_NAME");
				}

				tos_count_tHiveCreateTable_1++;

				/**
				 * [tHiveCreateTable_1 main ] stop
				 */

				/**
				 * [tHiveCreateTable_1 process_data_begin ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				/**
				 * [tHiveCreateTable_1 process_data_begin ] stop
				 */

				/**
				 * [tHiveCreateTable_1 process_data_end ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				/**
				 * [tHiveCreateTable_1 process_data_end ] stop
				 */

				/**
				 * [tHiveCreateTable_1 end ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				ok_Hash.put("tHiveCreateTable_1", true);
				end_Hash.put("tHiveCreateTable_1", System.currentTimeMillis());

				/**
				 * [tHiveCreateTable_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHiveCreateTable_1 finally ] start
				 */

				currentComponent = "tHiveCreateTable_1";

				/**
				 * [tHiveCreateTable_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHiveCreateTable_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final hospitalisations hospitalisationsClass = new hospitalisations();

		int exitCode = hospitalisationsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = hospitalisations.class.getClassLoader()
					.getResourceAsStream("etl_project/hospitalisations_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = hospitalisations.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("INPUT_PATH", "id_String");
					context.INPUT_PATH = (String) context.getProperty("INPUT_PATH");
					context.setContextType("Cloudera_VM_NameNodeUri", "id_String");
					context.Cloudera_VM_NameNodeUri = (String) context.getProperty("Cloudera_VM_NameNodeUri");
					context.setContextType("Cloudera_VM_User", "id_String");
					context.Cloudera_VM_User = (String) context.getProperty("Cloudera_VM_User");
					context.setContextType("Hadoop_Home", "id_String");
					context.Hadoop_Home = (String) context.getProperty("Hadoop_Home");
					context.setContextType("Cloudera_VM_ResourceManagerScheduler", "id_String");
					context.Cloudera_VM_ResourceManagerScheduler = (String) context
							.getProperty("Cloudera_VM_ResourceManagerScheduler");
					context.setContextType("Cloudera_VM_JobHistory", "id_String");
					context.Cloudera_VM_JobHistory = (String) context.getProperty("Cloudera_VM_JobHistory");
					context.setContextType("Cloudera_VM_ResourceManager", "id_String");
					context.Cloudera_VM_ResourceManager = (String) context.getProperty("Cloudera_VM_ResourceManager");
					context.setContextType("Cloudera_VM_hadoopConfSpecificJar", "id_String");
					context.Cloudera_VM_hadoopConfSpecificJar = (String) context
							.getProperty("Cloudera_VM_hadoopConfSpecificJar");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("INPUT_PATH")) {
				context.INPUT_PATH = (String) parentContextMap.get("INPUT_PATH");
			}
			if (parentContextMap.containsKey("Cloudera_VM_NameNodeUri")) {
				context.Cloudera_VM_NameNodeUri = (String) parentContextMap.get("Cloudera_VM_NameNodeUri");
			}
			if (parentContextMap.containsKey("Cloudera_VM_User")) {
				context.Cloudera_VM_User = (String) parentContextMap.get("Cloudera_VM_User");
			}
			if (parentContextMap.containsKey("Hadoop_Home")) {
				context.Hadoop_Home = (String) parentContextMap.get("Hadoop_Home");
			}
			if (parentContextMap.containsKey("Cloudera_VM_ResourceManagerScheduler")) {
				context.Cloudera_VM_ResourceManagerScheduler = (String) parentContextMap
						.get("Cloudera_VM_ResourceManagerScheduler");
			}
			if (parentContextMap.containsKey("Cloudera_VM_JobHistory")) {
				context.Cloudera_VM_JobHistory = (String) parentContextMap.get("Cloudera_VM_JobHistory");
			}
			if (parentContextMap.containsKey("Cloudera_VM_ResourceManager")) {
				context.Cloudera_VM_ResourceManager = (String) parentContextMap.get("Cloudera_VM_ResourceManager");
			}
			if (parentContextMap.containsKey("Cloudera_VM_hadoopConfSpecificJar")) {
				context.Cloudera_VM_hadoopConfSpecificJar = (String) parentContextMap
						.get("Cloudera_VM_hadoopConfSpecificJar");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : hospitalisations");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 73982 characters generated by Talend Open Studio for Big Data on the 24
 * octobre 2025 18:11:08 CEST
 ************************************************************************************************/